#include <iostream>
#include <queue>
#include <string>
using namespace std;

#define INF 987654321

int dx[4] = { 0,-1,0,1 };
int dy[4] = { 1,0,-1,0 };
int map[100][100];
int broken[100][100];
int n, m;
typedef pair<int, int> p;

void bfs(int a, int b)
{
	queue<p> q;
	q.push(make_pair(a, b));
	broken[a][b] = 0;
	while (!q.empty())
	{
		int x = q.front().first;
		int y = q.front().second;
		q.pop();
	
		for (int i = 0; i < 4; i++)
		{
			int nx = dx[i] + x;
			int ny = dy[i] + y;

			if (nx < 0 || ny < 0 || nx >= m || ny >= n)
				continue;

			if (map[nx][ny] == 1)
			{
				if (broken[nx][ny] > broken[x][y] + 1)
				{
					broken[nx][ny] = broken[x][y] + 1;
					q.push(make_pair(nx, ny));
				}
			}
			else if (map[nx][ny] == 0)
			{
				if (broken[nx][ny] > broken[x][y])
				{
					broken[nx][ny] = broken[x][y];
					q.push(make_pair(nx, ny));
				}
			}
		}
	}
}
int main()
{
	
	cin >> n >> m;
	
	for (int i = 0; i < m; i++)
	{
		string str;
		cin >> str;

		for (int j = 0; j < str.length(); j++)
		{
			map[i][j] = str[j] - '0';
			broken[i][j] = INF;
		}
	}
	bfs(0, 0);
	cout << broken[m - 1][n - 1];
	return 0;
	
}
