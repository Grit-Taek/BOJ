#include <iostream>
#include <vector>
#include <algorithm>


using namespace std;

int set[1001];

int getParent(int x)
{
	if (set[x] == x) return x;
	return set[x] = getParent(set[x]);
}

void unionParent(int a, int b)
{
	a = getParent(a);
	b = getParent(b);
	if (a < b) 
		set[b] = a;
	else
		set[a] = b;
}

class Edge {

public:
	int node[2];
	int distance;
	Edge(int a, int b, int distance)
	{
		this->node[0] = a;
		this->node[1] = b;
		this->distance = distance;
	}
	bool operator <(Edge &edge)
	{
		return this->distance < edge.distance;
	}
};

int main()
{
	vector<Edge> v;
	int n,m,sum;
	scanf("%d %d", &n, &m);

	for (int i = 1; i <= n; i++)
		set[i] = i;

	for (int i = 0; i < m; i++)
	{
		int x, y, z;
		scanf("%d %d %d", &x, &y, &z);
		v.push_back(Edge(x, y, z));
		
	}

	sort(v.begin(), v.end());

	sum = 0;

	for (int i = 0; i < v.size(); i++)
	{
		if (getParent(v[i].node[0]) != getParent(v[i].node[1]))
		{
			sum += v[i].distance;
			unionParent(v[i].node[0] , v[i].node[1]);
		}

	}

	printf("%d", sum);
	return 0;
}
