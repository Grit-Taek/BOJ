package dp;

import java.util.*;
import java.io.*;

public class Main {

	public static int[][] map;
	public static boolean[][] visited;
	public static int[] dx = {0,0,-1,1}, dy = {-1,1,0,0};
	public static int n,m;
	public static int answer = 0;
		public static void main(String args[]) throws IOException {
			 
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
			StringTokenizer st = new StringTokenizer(br.readLine());
			n = Integer.parseInt(st.nextToken());
			m = Integer.parseInt(st.nextToken());
			map = new int[n][m];
			visited = new boolean[n][m];
			for(int i=0;i<n;i++)
			{
				st = new StringTokenizer(br.readLine());
				for(int j=0;j<m;j++)
					map[i][j] = Integer.parseInt(st.nextToken());
			}
			for(int i=0;i<n;i++)
			{
				for(int j=0;j<m;j++)
				{
					dfs(i,j,0,0);
					Exception(i,j);
				}
			}
			
			bw.write(answer+"");
			bw.flush();
			bw.close();
		}
		
		public static void dfs(int x , int y, int cnt , int sum)
		{
			if(cnt == 4)
			{
				answer = Math.max(sum, answer);
				return;
			}
			for(int i=0;i<4;i++)
			{
				int nextX = x + dx[i];
				int nextY = y + dy[i];
				
				if(nextX < n && nextY < m && nextX >= 0 && nextY >= 0)
				{
					if(!visited[nextX][nextY])
					{
						visited[nextX][nextY] = true;
						dfs(nextX,nextY , cnt+1 , sum+map[nextX][nextY]);
						visited[nextX][nextY] = false;
					}
				}
			}
		}
		
		public static void Exception(int x, int y)
		{
			int wing = 4;
			int sum = map[x][y];
			int min = 9999;
			for(int i=0;i<4;i++)
			{
				int nextX = x + dx[i];
				int nextY = y + dy[i];
				
				if(wing <= 2) return;
				if(nextX < 0 || nextY < 0 || nextX >= n || nextY >= m) {
					wing--;
					continue;
				}
				min = Math.min(map[nextX][nextY], min);
				sum += map[nextX][nextY];
			}
			if(wing == 4)
				sum -= min;
			answer = Math.max(sum, answer);
			
		}
		
}

