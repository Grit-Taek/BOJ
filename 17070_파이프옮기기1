
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;
import java.io.IOException;

public class Main {
	
		public static int[][] map;
		public static int[][] dir = {{0,1},{1,0},{1,1}}; // 가로, 세로, 대각선 
		public static int n;
		public static int answer = 0;
		public static void main(String args[]) throws IOException{
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
			StringTokenizer st = new StringTokenizer(br.readLine());
			n = Integer.parseInt(st.nextToken());
			map = new int[n+1][n+1];
			for(int i=1;i<=n;i++)
			{
				st = new StringTokenizer(br.readLine());
				for(int j=1;j<=n;j++)
					map[i][j] = Integer.parseInt(st.nextToken());
			}
			dfs(1,2,0);
			bw.write(answer+"");
			bw.flush();
			bw.close();
		}
		public static boolean isPossible(int x, int y)
		{
			if(x > 0 && y > 0 && x <=n && y <=n) return true;
			return false;
		}
		// 0 가로, 1 세로,  2 대각선 
		public static void dfs(int x,int y,int front)
		{
			if(x == n && y == n)
			{
				answer++;
				return ;
			}
			for(int i=0;i<3;i++)
			{
				if((i == 0 && front == 1) || (i == 1 && front == 0)) continue;
				
				int nextX = x + dir[i][0];
				int nextY = y + dir[i][1];
				
				if(isPossible(nextX,nextY) == false || map[nextX][nextY] == 1) continue;
				if(i == 2)
				{
					if(map[x][y+1] == 1 || map[x+1][y] == 1) continue;
				}
			
				dfs(nextX, nextY , i);
			}
			
		}
}
